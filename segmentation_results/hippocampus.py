# -*- coding: utf-8 -*-
"""Hippocampus.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nd8nCaY5d3MIWXJNHUkHxQRWlDe_cPZ0
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install monai
!pip install "monai[extras]"
# Uninstall any existing MONAI version
!pip uninstall -y monai

# Install MONAI 1.4
!pip install monai==1.4

# Optional: Setup a virtual environment (if required)
!pip install virtualenv
!virtualenv env
!source env/bin/activate

# Install MONAI in the virtual environment
!pip install monai==1.4

# Ensure necessary dependencies are installed
!pip install -q "monai-weekly[nibabel, tqdm]" onnxruntime matplotlib

# Verify installations
import monai
print(f"MONAI version: {monai.__version__}")

# Verify matplotlib
import matplotlib
print("Matplotlib imported successfully.")

# Verify ONNXRuntime
import onnxruntime
print("ONNXRuntime imported successfully.")

# For Jupyter Notebook, ensure inline plotting
# %matplotlib inline



import os
import tempfile

directory = os.environ.get("MONAI_DATA_DIRECTORY")
if directory is not None:
    os.makedirs(directory, exist_ok=True)
root_dir = tempfile.mkdtemp() if directory is None else directory
print(root_dir)

from monai.apps import DecathlonDataset
from monai.transforms import Compose, LoadImaged, EnsureChannelFirstd
from monai.apps import DecathlonDataset


# Define transformations (example)
train_transform = Compose([
    LoadImaged(keys=["image", "label"]),
    EnsureChannelFirstd(keys=["image", "label"]),
])

# Automatically download and prepare the Decathlon dataset
train_ds = DecathlonDataset(
    root_dir=root_dir,
    task="Task04_Hippocampus",
    transform=train_transform,
    section="training",
    download=True,  # Automatically downloads the dataset
    cache_rate=0.0,  # Avoid caching for memory efficiency
    num_workers=4
)

# Extract and visualize hippocampus voxel intensities

# Load a single sample
sample = train_ds[0]  # Adjust index as needed
image = sample['image'][0].numpy()  # Extract the first channel of the image
label = sample['label'][0].numpy()  # Extract the first channel of the label

# Extract voxel intensities where the label corresponds to the hippocampus (label value 1)
hippocampus_voxels = image[label == 1]

# Plot histograms and box plots
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 6))

# Histogram
plt.subplot(1, 2, 1)
sns.histplot(hippocampus_voxels, bins=30, kde=True)
plt.title('Histogram of Hippocampus Voxel Intensities')
plt.xlabel('Intensity')
plt.ylabel('Frequency')

# Box Plot
plt.subplot(1, 2, 2)
sns.boxplot(x=hippocampus_voxels)
plt.title('Box Plot of Hippocampus Voxel Intensities')
plt.xlabel('Intensity')

plt.tight_layout()
plt.show()



"""# Result Distribution Visualization"""

import pandas as pd
data = pd.read_csv("/content/results-hauss-2D-L1.csv").convert_dtypes()
data.hist(column = 'metric', grid=False, bins=50, density=True, color='green')

import seaborn as sns

sns.histplot(data=data["metric"], stat="probability", kde=True, color='green')

import pandas as pd
import seaborn as sns

data = pd.read_csv("/content/Brain-results-hauss-2D.csv").convert_dtypes()
sns.histplot(data=data["metric"], stat="probability", kde=True, color='green')

import pandas as pd
import seaborn as sns

data = pd.read_csv("/content/Hippo-results-hauss-2D.csv").convert_dtypes()
sns.histplot(data=data["metric"], stat="probability", kde=True, color='green')



